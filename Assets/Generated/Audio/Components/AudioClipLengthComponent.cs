//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AudioEntity {

    public Core.Audio.ClipLengthComponent clipLength { get { return (Core.Audio.ClipLengthComponent)GetComponent(AudioComponentsLookup.ClipLength); } }
    public bool hasClipLength { get { return HasComponent(AudioComponentsLookup.ClipLength); } }

    public void AddClipLength(float newValue) {
        var index = AudioComponentsLookup.ClipLength;
        var component = (Core.Audio.ClipLengthComponent)CreateComponent(index, typeof(Core.Audio.ClipLengthComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceClipLength(float newValue) {
        var index = AudioComponentsLookup.ClipLength;
        var component = (Core.Audio.ClipLengthComponent)CreateComponent(index, typeof(Core.Audio.ClipLengthComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveClipLength() {
        RemoveComponent(AudioComponentsLookup.ClipLength);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AudioMatcher {

    static Entitas.IMatcher<AudioEntity> _matcherClipLength;

    public static Entitas.IMatcher<AudioEntity> ClipLength {
        get {
            if (_matcherClipLength == null) {
                var matcher = (Entitas.Matcher<AudioEntity>)Entitas.Matcher<AudioEntity>.AllOf(AudioComponentsLookup.ClipLength);
                matcher.componentNames = AudioComponentsLookup.componentNames;
                _matcherClipLength = matcher;
            }

            return _matcherClipLength;
        }
    }
}
