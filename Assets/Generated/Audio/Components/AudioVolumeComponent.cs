//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class AudioEntity {

    public Core.Audio.VolumeComponent volume { get { return (Core.Audio.VolumeComponent)GetComponent(AudioComponentsLookup.Volume); } }
    public bool hasVolume { get { return HasComponent(AudioComponentsLookup.Volume); } }

    public void AddVolume(float newValue) {
        var index = AudioComponentsLookup.Volume;
        var component = (Core.Audio.VolumeComponent)CreateComponent(index, typeof(Core.Audio.VolumeComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceVolume(float newValue) {
        var index = AudioComponentsLookup.Volume;
        var component = (Core.Audio.VolumeComponent)CreateComponent(index, typeof(Core.Audio.VolumeComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveVolume() {
        RemoveComponent(AudioComponentsLookup.Volume);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class AudioMatcher {

    static Entitas.IMatcher<AudioEntity> _matcherVolume;

    public static Entitas.IMatcher<AudioEntity> Volume {
        get {
            if (_matcherVolume == null) {
                var matcher = (Entitas.Matcher<AudioEntity>)Entitas.Matcher<AudioEntity>.AllOf(AudioComponentsLookup.Volume);
                matcher.componentNames = AudioComponentsLookup.componentNames;
                _matcherVolume = matcher;
            }

            return _matcherVolume;
        }
    }
}
