//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public VirtualCameraFollowTargetListenerComponent virtualCameraFollowTargetListener { get { return (VirtualCameraFollowTargetListenerComponent)GetComponent(GameComponentsLookup.VirtualCameraFollowTargetListener); } }
    public bool hasVirtualCameraFollowTargetListener { get { return HasComponent(GameComponentsLookup.VirtualCameraFollowTargetListener); } }

    public void AddVirtualCameraFollowTargetListener(System.Collections.Generic.List<IVirtualCameraFollowTargetListener> newValue) {
        var index = GameComponentsLookup.VirtualCameraFollowTargetListener;
        var component = (VirtualCameraFollowTargetListenerComponent)CreateComponent(index, typeof(VirtualCameraFollowTargetListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceVirtualCameraFollowTargetListener(System.Collections.Generic.List<IVirtualCameraFollowTargetListener> newValue) {
        var index = GameComponentsLookup.VirtualCameraFollowTargetListener;
        var component = (VirtualCameraFollowTargetListenerComponent)CreateComponent(index, typeof(VirtualCameraFollowTargetListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveVirtualCameraFollowTargetListener() {
        RemoveComponent(GameComponentsLookup.VirtualCameraFollowTargetListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherVirtualCameraFollowTargetListener;

    public static Entitas.IMatcher<GameEntity> VirtualCameraFollowTargetListener {
        get {
            if (_matcherVirtualCameraFollowTargetListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.VirtualCameraFollowTargetListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherVirtualCameraFollowTargetListener = matcher;
            }

            return _matcherVirtualCameraFollowTargetListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddVirtualCameraFollowTargetListener(IVirtualCameraFollowTargetListener value) {
        var listeners = hasVirtualCameraFollowTargetListener
            ? virtualCameraFollowTargetListener.value
            : new System.Collections.Generic.List<IVirtualCameraFollowTargetListener>();
        listeners.Add(value);
        ReplaceVirtualCameraFollowTargetListener(listeners);
    }

    public void RemoveVirtualCameraFollowTargetListener(IVirtualCameraFollowTargetListener value, bool removeComponentWhenEmpty = true) {
        var listeners = virtualCameraFollowTargetListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveVirtualCameraFollowTargetListener();
        } else {
            ReplaceVirtualCameraFollowTargetListener(listeners);
        }
    }
}
