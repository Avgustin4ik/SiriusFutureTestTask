//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public VirtualCameraLookAtTargetListenerComponent virtualCameraLookAtTargetListener { get { return (VirtualCameraLookAtTargetListenerComponent)GetComponent(GameComponentsLookup.VirtualCameraLookAtTargetListener); } }
    public bool hasVirtualCameraLookAtTargetListener { get { return HasComponent(GameComponentsLookup.VirtualCameraLookAtTargetListener); } }

    public void AddVirtualCameraLookAtTargetListener(System.Collections.Generic.List<IVirtualCameraLookAtTargetListener> newValue) {
        var index = GameComponentsLookup.VirtualCameraLookAtTargetListener;
        var component = (VirtualCameraLookAtTargetListenerComponent)CreateComponent(index, typeof(VirtualCameraLookAtTargetListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceVirtualCameraLookAtTargetListener(System.Collections.Generic.List<IVirtualCameraLookAtTargetListener> newValue) {
        var index = GameComponentsLookup.VirtualCameraLookAtTargetListener;
        var component = (VirtualCameraLookAtTargetListenerComponent)CreateComponent(index, typeof(VirtualCameraLookAtTargetListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveVirtualCameraLookAtTargetListener() {
        RemoveComponent(GameComponentsLookup.VirtualCameraLookAtTargetListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherVirtualCameraLookAtTargetListener;

    public static Entitas.IMatcher<GameEntity> VirtualCameraLookAtTargetListener {
        get {
            if (_matcherVirtualCameraLookAtTargetListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.VirtualCameraLookAtTargetListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherVirtualCameraLookAtTargetListener = matcher;
            }

            return _matcherVirtualCameraLookAtTargetListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddVirtualCameraLookAtTargetListener(IVirtualCameraLookAtTargetListener value) {
        var listeners = hasVirtualCameraLookAtTargetListener
            ? virtualCameraLookAtTargetListener.value
            : new System.Collections.Generic.List<IVirtualCameraLookAtTargetListener>();
        listeners.Add(value);
        ReplaceVirtualCameraLookAtTargetListener(listeners);
    }

    public void RemoveVirtualCameraLookAtTargetListener(IVirtualCameraLookAtTargetListener value, bool removeComponentWhenEmpty = true) {
        var listeners = virtualCameraLookAtTargetListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveVirtualCameraLookAtTargetListener();
        } else {
            ReplaceVirtualCameraLookAtTargetListener(listeners);
        }
    }
}
